Cognito Migration Documentation 

 

0. Prequel & Setup 

This documentation is intended to be a set of instructions and descriptions on the tools of which are provided, to perform a migration operation of users to AWS Cognito. It is assumed that the account(s) used to run these tools have enough privileges and access to perform the duties required by the tools, presumably an administrator.  

0.1 DB Tool Setup 

0.1.1. Configuration file. 

Please enter the database URL for property dbUrl in dao.properties. 

0.2 Cognito Tool Setup 

0.2.1. Configuration file.  

Please enter the appropriate keys and user pool IDs in the configuration file found in the same directory as the jar. Access/secret/session keys may be pulled from the AWS CLI configuration file, found in the file located at user/.aws/credentials. Please update the Cloud Watch Log ARN to the administrator’s roles, and make sure the email API URLs, user pool IDs are valid and correct.  

0.2.2. AWS CLI Configuration. 

Please make sure the machine used to run these tools have AWS CLI installed, with a set of valid access/secret/session tokens. The exact same set of tokens may be used in the configuration file as described in 0.2.1. 

 

Extracting Users from the DB 

ExtractUserData-1.0-SNAPSHOT.jar 

This command-line app is used for generating 2 json files with Merchant and Operator data from PostGresql database. Those json files are used for importing user to Cognito and also data validation. 

 

run the jar with 

java -jar ExtractUserData-1.0-SNAPSHOT 

Then insert the database's username and password. 

 

2 json files will be generated, They will be used for Cognito User Import: 

MerchantUsers.json has all the merchant users' email, user group and email status. 

OperatorUsers.json has all the operator users' email, user group and email status. 

 

Importing Users to AWS Cognito 

Options when executing the jar: 

CognitoImportToolv2-1.0-SNAPSHOT.jar [user pool] [configuration file location] [function flag] [additional info] 

 

Note that for the examples of the calls below, we are working on the merchant user pool. In order to switch over to the operator pool, just change the user pool flag like so: 

Example for step 1:  

For Merchants, it is: java –jar CognitoImportToolv2-1.0-SNAPSHOT.jar –M ./configfile.json -fi ./Merchants.json. 

For Operators, it will be the following: java –jar CognitoImportToolv2-1.0-SNAPSHOT.jar –O ./configfile.json -fi ./Operators.json. 

Please be sure to update the file path given to the tool accordingly! (don’t give it the file for merchants, but for operators!) 

 

Position 

Possible/example values 

Definitions 

[user pool] 

-M, -O 

Flag to determine which user pool we are going to be working on: 

-M for Merchants 

-O for Operators 

[configuration file location] 

./configfile.json, etc. 

Location of the configuration file to be used for the tool. 

[function flag] 

-fi, -atg, -du, -rl, -del, -chk, -se 

-fi: “full import” 

 Performs the full import function with a provided file of users. This will generate some files you will find in the current directory. 

 

-atg: “add to groups” 

From the provided file, read users & their groups. Then, add the users to the respective groups. 

 

-du: “disable users” 

From the provided file, read users & disable these users in AWS Cognito. 

 

-rl: “retrieve list” 

Retrieves the list of all users from the user pool, declared in the [user pool] flag section. 

 

-del: “delete users” 

From the provided file, delete these users in AWS Cognito. 

 

-chk: “check import job” 

From the provided job ID, checks the status of the import job. 

 

-se: “send emails” 

From the provided file, read users & their respective emails. This function will send password reset emails to the users specified in the file. 

[additional info] 

./MerchantUsers.json, etc. 

This is where the location for required files to be provided. Please provide the file path. 

Step 1: FULL IMPORT OF USERS:  java –jar CognitoImportToolv2-1.0-SNAPSHOT.jar –M ./configfile.json -fi ./Merchants.json 

First step is to perform a full import of the users. -M is for merchants, but we can swap to –O for operators. Be sure that the supplied file path is correct and is pointing to the right file (one file for merchants, one for operators).  

This step will also create three other files: 

One file is a list of all the users, in a CSV format. This is for uploading to AWS Cognito.  

Another file is a list of all the users with their respective groups. This is to be used later in the ‘-atg’ function. 

Final file created is a list of all the users with their respective internal DB IDs and their emails. This is to be used later in the ‘-se’ function. 

After the files are created, the tool will attempt to upload the CSV file to AWS Cognito, and start the import job on Cognito. If all succeeds the tool will return back a job id. Please take note of the job ID as we may use it in the next step. 

Step 2: *OPTIONAL* CONFIRMING THAT THE IMPORT JOB SUCCEEDED: java –jar CognitoImportToolv2-1.0-SNAPSHOT.jar –M ./configfile.json -chk import-REST_OF_THE_JOB_ID 

This step is optional, but HIGHLY RECOMMENDED. This step double checks on AWS Cognito to make sure the import succeeded...or failed. If the import succeeds, please go on forward to the next step. If the import fails: 

Go to AWS Console, and go to CloudWatch. 

Under Logs, find the respective log group. To make things easier, look at the name of the log group, and it should have the user pool ID of the user pool that is being worked on. 

Read the logs & troubleshoot. 

Redo step 1 from scratch, and step 2 to confirm that things are OK. 

 

Step 3: ADD USERS TO THEIR RESPECTIVE GROUPS: java –jar CognitoImportToolv2-1.0-SNAPSHOT.jar –M ./configfile.json -atg ./groups_MERCHANT.json 

This step is to add users to their respective groups. This step is necessary because step 1 cannot assign users to groups. Therefore, we must have another step to add users to groups, and this is what this step does. 

 

Step 4: RETRIEVING FULL USER LIST: java –jar CognitoImportToolv2-1.0-SNAPSHOT.jar –M ./configfile.json -rl 

The only step that does not need anything in the [additional info] field. This will pull all user information from AWS Cognito, and save it in a file: CompleteUserList_(DATE)_(USER POOL).json, located in the same folder as this tool. 

 

Linking AWS Cognito Users Back to the DB 

UpdateCognitoId-1.0-SNAPSHOT.jar 

This app is used for updating field security_principal.oid with Cognito Id extracted based on 2 json files exported from Cognito 

. 

For Merchant users, run the jar with 

java -jar UpdateCognitoId-1.0-SNAPSHOT mer fileName.json 

For Operator users, run the jar with 

java -jar UpdateCognitoId-1.0-SNAPSHOT opt fileName.json 

Then insert the database's username and password. 

 

The 2 json files need to be in the same folder with this jar file 

A json file "OidBackUp.json" will be generated before the update in case of a future rollback. 

 

Update User Status 

UpdateStatus-1.0-SNAPSHOT.jar 

This app is used for updating the status for all merchant and operator users in field customer.customer_status and fsdp_user.status. All the users' status, except for the suspended users, will be update to "EMAIL_SENT". 

For the suspended users ("ACQ_SUSPENDED", the status will not change.  

A new row will be inserted into table status_tracking, with current_status being "ACQ_SUSPENDED" and previous_status being "EMAIL_SENT" for each suspended user. 

run this app with 

java -jar StatusUpdate-1.0-SNAPSHOT 

Then insert the database's username and password 

2 json file "MerchantStatusBackUp" and "OperatorStatusBackUp" will be generated in case of a future rollback. 

Roll Back User Status and Cognito ID 

RollBack-1.0-SNAPSHOT.jar 

This app is used for rolling back the changes made by the 2 apps above using the generated json files. 

run this app with 

java -jar RollBack-1.0-SNAPSHOT 

Then insert the database's username and password. 

The backup json files need to be in the same folder of this jar file. 

 

Sending Password Reset Emails 

SENDING EMAILS: java –jar CognitoImportToolv2-1.0-SNAPSHOT.jar –M ./configfile.json -se ./emaillist_Merchant.json 

This will read all users from the json file, and send emails alerting them to reset all of their passwords. 

 

Other Notable functionality: 

Deleting & Disabling users in AWS Cognito: 

Disabling users: java –jar CognitoImportToolv2-1.0-SNAPSHOT.jar –M ./configfile.json -du ./Merchants.json 

Deleting users: java –jar CognitoImportToolv2-1.0-SNAPSHOT.jar –M ./configfile.json -del ./Merchants.json 

For disabling and deleting users, they follow the same argument format as the rest of the features. One important thing to note:  

While deleting users, they WILL be DISABLED first. It is not a problem if the user was previously disabled (they will still be deleted), but if they were not disabled previously, the users will be disabled first prior to deletion. 

 